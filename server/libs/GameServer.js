var net = require("net")  , util = require('util')  , logger = require('winston')  , config = require('../config');var MultiplayerServer = require('./MultiplayerServer');function GameServer(room) {  this.dotsRemaining = 0;  this.clicked = [];  this.finished = false;  this.map = 'w';  this.room = room;  this.port = config.gamePort + room;  this.generateMap();  this.server = new MultiplayerServer();  var server = this.server;  var game = this;    server.on('connection', function(user) {    user.name = '???';    user.color1 = '0xffffff';    user.color2 = '0x000000';    user.score = 0;    user.id = '0';    user.fullname = user.name + '`0';    user.index = server.count();        user.infoPacket = '';    user.ready = false;  });  server.on('data', function(user, data) {    switch(data[0]) {      case 'i':        var arg = data.substr(1).split('`');        user.name = arg[0]        user.id = arg[1]        user.color1 = arg[2]        user.color2 = arg[3];        user.fullname = user.name+'`'+user.id;        user.ready = true;        user.infoPacket = 'i' + [user.name, user.id, user.color1, user.color2, user.index].join('`');        server.writeAll(user.infoPacket);            // TODO: Fix me - Sometimes information doesn't reach the user        server.each(function(u) {          if(u.ready && u !== user)            user.write(u.infoPacket);        });        user.write(game.map);        break;      case 'm': // Mouse movement array        user.writeOthers(data); // TODO: Fix this, lazy hack.        break;      case 'x': // Dot clicked        var dot = data.substr(1);        if(game.clicked[dot]) break;        game.clicked[dot] = true;        user.score++;        server.writeAll('x' + user.index + dot);        game.remaining--;        if(game.remaining == 0)          game.finish();        break;              case 'e': // Game ended        game.finish();        break;            default: logger.warn('Unknown game server packet: ' + data);    }  });  server.on('close', function() {    logger.info('Game server ' + game.room + ' shutting down');  });  server.start(config.gamePort + room, function() {    logger.info('Game server ' + game.room + ' running on port ' + game.port);  });}GameServer.prototype.close = function() {  this.finish();}GameServer.prototype.generateMap = function() {  if(!config.debug) {    var result = []    , sizeModifier = this.random(5, -5)    , dots = this.random(70, 20);    for(var i = 0; i < dots; i++) {      var size = this.random(43, 17) + sizeModifier; // 35px to 85px in size      var dot = [this.random(550, size), this.random(400, size), size * 2];      result.push(dot.join('`'));    }  } else {    var dots = 1;    var dot = [275, 200, 300];    var result = [dot.join('`')];  }  this.remaining = dots;  this.map = 'w' + result.join(',');}GameServer.prototype.finish = function() {  if(this.finished) return; // Only finish once (lol)  this.finished = true;  var winningScore = 0;  var winners = "";  var score = []  this.server.each(function(user) {    if(!user.ready) return;    if(user.score > winningScore) {      winners = user.name;      winningScore = user.score;    } else if(user.score == winningScore) {      winners += ' and ' + user.name;    }    score.push(user.index + user.score);  });  logger.info('Game won by ' + winners + ' with a score of ' + winningScore);  this.server.writeAll('k' + score.join('`'));  this.server.close();}GameServer.prototype.random = function (max, min) {  if(min === undefined) min = 0;  return Math.round(Math.random() * (max - min)) + min;}module.exports = GameServer;